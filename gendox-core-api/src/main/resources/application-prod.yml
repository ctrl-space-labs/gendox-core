

server:
  port: 5000
  servlet:
    context-path: /gendox/api/v1
logging:
  level:
    dev.ctrlspace: DEBUG
    org.springframework: INFO
spring:
  cache:
    type: caffeine
    caffeine:
      spec: expireAfterWrite=5m,maximumSize=1000
  mvc:
    format:
      date-time: yyyy-MM-dd'T'HH:mm:ss.SSSZ
  jpa:
    show-sql: false
    hibernate:
      ddl-auto: none
  datasource:
    url: ${DATABASE_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    hikari:
      maximum-pool-size: 100
      minimum-idle: 10
  #  datasource:
  #    url: jdbc:postgresql://localhost:5432/postgres
  #    username: postgres
  #    password: 123456789
  jackson:
    serialization:
      write-dates-as-timestamps: false
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 100MB
  application:
    name: gendox-core-api



  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: https://dev.gendox.ctrlspace.dev/idp/realms/gendox-idp-dev
          jwk-set-uri: https://dev.gendox.ctrlspace.dev/idp/realms/gendox-idp-dev/protocol/openid-connect/certs



keycloak:
  base-url: https://dev.gendox.ctrlspace.dev/idp
  token-uri: https://dev.gendox.ctrlspace.dev/idp/realms/gendox-idp-dev/protocol/openid-connect/token
  realm: gendox-idp-dev
  client-id: ${KEYCLOAK_CLIENT_ID}
  client-secret: ${KEYCLOAK_CLIENT_SECRET}

management:
  tracing:
    sampling:
      probability: 1.0

  metrics:
    distribution:
      percentiles-histogram:
        http.server.requests: true
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
  observations:
    key-values:
      application: gendox-core-api

springdoc:
  swagger-ui:
    path: /api-documentation

rsa:
  #private-key: classpath:.env/local/local-non-production-use-private_key.pem
  private-key: ${RSA_KEY_PATH}


gendox:
  documents:
    upload-dir: s3://gendox.organization.documents.dev
    #    upload-dir: file:c:\\Users\\sekas\\gendox-documents
    wordCount: 300
    allowed:
      extensions: .txt,.md,.rst,.pdf
  integrations:
#    poller: 30000 # 30 seconds
    poller: 1800000 # 30 minutes in milliseconds
    storage:
      temporary: /var/tmp
    s3:
      sqs:
        wait-time-seconds: 1 #not in use
        visibility-timeout-seconds: 300

  models:
    openai:
      ada2:
        key: ${OPENAI_KEY}
    cohere:
      key: ${COHERE_KEY}
  domain:
    base-url: http://localhost:${server.port}
    document-sections:
      get-document-sections: /documents/sections
    sections: https://domain.com/context-path/documents/sections/
    messages:
      completion:
        post-completion-message: /messages/semantic-completion
      search:
        post-search-message: /messages/semantic-search
  pages:
    default: "&page=0&size=5"
  agents:
    splitter-type: "STATIC_WORD_COUNT_SPLITTER"
    max_token: 500
    temperature: 0.8
    top_p: 0.4

  moderation:
    message: "Sorry, I can't reply in this message, it contains inappropriate content. If this this not the case, please contact the support team."


  batch-jobs:
    document-training:
      job:
        name: documentTrainingJob
        thread-pool-size: 50
        steps:
          document-training-step:
            name: documentTrainingStep
            throttle-limit: 10    # this should be around 10 to not hit the throttle limit of the OpenAI API
            chunk-size: 10
            pageable-size: 1000
    document-splitter:
      job:
        name: documentSplitterJob
        thread-pool-size: 50
        steps:
          document-splitter-step:
            name: documentSplitterStep
            throttle-limit: 10    # this should be around 10 to not hit the throttle limit of the OpenAI API
            chunk-size: 10
            pageable-size: 1000


# AWS

cloud:
  aws:
    s3:
      region: eu-central-1
    SQS:
      region: eu-central-1

# Discord

discord:
  bots:
    gendox-bot:
      token: ${DISCORD_TOKEN:default-token}
  server:
    group-name: gendox-agents


